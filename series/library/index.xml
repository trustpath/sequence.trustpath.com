<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on Sequence</title>
    <link>http://sequencer.io/series/library/</link>
    <description>Recent content in Library on Sequence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dataence, LLC. All Rights Reserved.</copyright>
    <lastBuildDate>Sat, 28 Feb 2015 18:48:24 -0800</lastBuildDate>
    <atom:link href="http://sequencer.io/series/library/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started</title>
      <link>http://sequencer.io/manual/library/</link>
      <pubDate>Sat, 28 Feb 2015 18:48:24 -0800</pubDate>
      
      <guid>http://sequencer.io/manual/library/</guid>
      <description>&lt;p&gt;The &lt;code&gt;sequence&lt;/code&gt; &lt;a href=&#34;https://github.com/trustpath/sequence&#34;&gt;library&lt;/a&gt; implements the concepts described in this manual.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Command</title>
      <link>http://sequencer.io/manual/command/</link>
      <pubDate>Sat, 28 Feb 2015 18:48:24 -0800</pubDate>
      
      <guid>http://sequencer.io/manual/command/</guid>
      <description>

&lt;p&gt;The &lt;code&gt;sequence&lt;/code&gt; command is developed to demonstrate the use of this package. You can find it in the &lt;code&gt;sequence&lt;/code&gt; directory. The &lt;code&gt;sequence&lt;/code&gt; command implements the &lt;em&gt;sequential semantic log parser&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage:
  sequence [command]

Available Commands:
  scan                      scan will tokenize a log file or message and output a list of tokens
  analyze                   analyze will analyze a log file and output a list of patterns that will match all the log messages
  parse                     parse will parse a log file and output a list of parsed tokens for each of the log messages
  bench                     benchmark scanning or parsing of a log file, no output is provided
  help [command]            Help about any command

 Available Flags:
  -c, --config=&amp;quot;./sequence.toml&amp;quot;: TOML-formatted configuration file
  -f, --fmt=&amp;quot;general&amp;quot;: format of the message to tokenize, can be &#39;json&#39; or &#39;general&#39;
  -h, --help=false: help for sequence
  -i, --infile=&amp;quot;&amp;quot;: input file, required
  -o, --outfile=&amp;quot;&amp;quot;: output file, if empty, to stdout
  -d, --patdir=&amp;quot;&amp;quot;: pattern directory,, all files in directory will be used
  -p, --patfile=&amp;quot;&amp;quot;: initial pattern file, optional

Use &amp;quot;sequence help [command]&amp;quot; for more information about that command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scan:18f42655bc34c316ea561fdfae1d14c2&#34;&gt;Scan&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Usage:
  sequence scan [flags]

 Available Flags:
  -h, --help=false: help for scan
  -m, --msg=&amp;quot;&amp;quot;: message to tokenize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ ./sequence scan -m &amp;quot;jan 14 10:15:56 testserver sudo:    gonner : tty=pts/3 ; pwd=/home/gonner ; user=root ; command=/bin/su - ustream&amp;quot;
  #   0: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%ts%&amp;quot;, Value=&amp;quot;jan 14 10:15:56&amp;quot; }
  #   1: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;testserver&amp;quot; }
  #   2: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;sudo&amp;quot; }
  #   3: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;:&amp;quot; }
  #   4: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;gonner&amp;quot; }
  #   5: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;:&amp;quot; }
  #   6: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;tty&amp;quot; }
  #   7: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;=&amp;quot; }
  #   8: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;pts/3&amp;quot; }
  #   9: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;;&amp;quot; }
  #  10: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;pwd&amp;quot; }
  #  11: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;=&amp;quot; }
  #  12: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;/home/gonner&amp;quot; }
  #  13: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;;&amp;quot; }
  #  14: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;user&amp;quot; }
  #  15: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;=&amp;quot; }
  #  16: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;root&amp;quot; }
  #  17: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;;&amp;quot; }
  #  18: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;command&amp;quot; }
  #  19: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;=&amp;quot; }
  #  20: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;/bin/su&amp;quot; }
  #  21: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;-&amp;quot; }
  #  22: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;ustream&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;parse:18f42655bc34c316ea561fdfae1d14c2&#34;&gt;Parse&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Usage:
  sequence parse [flags]

 Available Flags:
  -h, --help=false: help for parse
  -i, --infile=&amp;quot;&amp;quot;: input file, required
  -o, --outfile=&amp;quot;&amp;quot;: output file, if empty, to stdout
  -d, --patdir=&amp;quot;&amp;quot;: pattern directory,, all files in directory will be used
  -p, --patfile=&amp;quot;&amp;quot;: initial pattern file, required
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following command parses a file based on existing rules. Note that the
performance number (9570.20 msgs/sec) is mostly due to reading/writing to disk.
To get a more realistic performance number, see the benchmark section below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ ./sequence parse -d ../../patterns -i ../../data/sshd.all  -o parsed.sshd
  Parsed 212897 messages in 22.25 secs, ~ 9570.20 msgs/sec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an entry from the output file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Jan 15 19:39:26 jlz sshd[7778]: pam_unix(sshd:session): session opened for user jlz by (uid=0)
  #   0: { Field=&amp;quot;%createtime%&amp;quot;, Type=&amp;quot;%ts%&amp;quot;, Value=&amp;quot;jan 15 19:39:26&amp;quot; }
  #   1: { Field=&amp;quot;%apphost%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;jlz&amp;quot; }
  #   2: { Field=&amp;quot;%appname%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;sshd&amp;quot; }
  #   3: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;[&amp;quot; }
  #   4: { Field=&amp;quot;%sessionid%&amp;quot;, Type=&amp;quot;%integer%&amp;quot;, Value=&amp;quot;7778&amp;quot; }
  #   5: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;]&amp;quot; }
  #   6: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;:&amp;quot; }
  #   7: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;pam_unix&amp;quot; }
  #   8: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;(&amp;quot; }
  #   9: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;sshd&amp;quot; }
  #  10: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;:&amp;quot; }
  #  11: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;session&amp;quot; }
  #  12: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;)&amp;quot; }
  #  13: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;:&amp;quot; }
  #  14: { Field=&amp;quot;%object%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;session&amp;quot; }
  #  15: { Field=&amp;quot;%action%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;opened&amp;quot; }
  #  16: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;for&amp;quot; }
  #  17: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;user&amp;quot; }
  #  18: { Field=&amp;quot;%dstuser%&amp;quot;, Type=&amp;quot;%string%&amp;quot;, Value=&amp;quot;jlz&amp;quot; }
  #  19: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;by&amp;quot; }
  #  20: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;(&amp;quot; }
  #  21: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;uid&amp;quot; }
  #  22: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;=&amp;quot; }
  #  23: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%integer%&amp;quot;, Value=&amp;quot;0&amp;quot; }
  #  24: { Field=&amp;quot;%funknown%&amp;quot;, Type=&amp;quot;%literal%&amp;quot;, Value=&amp;quot;)&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;benchmark:18f42655bc34c316ea561fdfae1d14c2&#34;&gt;Benchmark&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Usage:
  sequence bench [flags]

 Available Flags:
  -c, --cpuprofile=&amp;quot;&amp;quot;: CPU profile filename
  -h, --help=false: help for bench
  -i, --infile=&amp;quot;&amp;quot;: input file, required
  -d, --patdir=&amp;quot;&amp;quot;: pattern directory,, all files in directory will be used
  -p, --patfile=&amp;quot;&amp;quot;: pattern file, required
  -w, --workers=1: number of parsing workers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following command will benchmark the parsing of two files. First file is a
bunch of sshd logs, averaging 98 bytes per message. The second is a Cisco ASA
log file, averaging 180 bytes per message.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./sequence bench -p ../../patterns/sshd.txt -i ../../data/sshd.all
Parsed 212897 messages in 1.69 secs, ~ 126319.27 msgs/sec

$ ./sequence bench -p ../../patterns/asa.txt -i ../../data/allasa.log
Parsed 234815 messages in 2.89 secs, ~ 81323.41 msgs/sec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Performance can be improved by adding more cores:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GOMAXPROCS=2 ./sequence bench -p ../../patterns/sshd.txt -i ../../data/sshd.all -w 2
Parsed 212897 messages in 1.00 secs, ~ 212711.83 msgs/sec

$ GOMAXPROCS=2 ./sequence bench -p ../../patterns/asa.txt -i ../../data/allasa.log -w 2
Parsed 234815 messages in 1.56 secs, ~ 150769.68 msgs/sec
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://sequencer.io/manual/configuration/</link>
      <pubDate>Sat, 28 Feb 2015 18:48:24 -0800</pubDate>
      
      <guid>http://sequencer.io/manual/configuration/</guid>
      <description>&lt;pre&gt;&lt;code&gt;version = &amp;quot;0.1&amp;quot;

timeFormats = [
    &amp;quot;Mon Jan _2 15:04:05 2006&amp;quot;,
    &amp;quot;Mon Jan _2 15:04:05 MST 2006&amp;quot;,
    &amp;quot;Mon Jan 02 15:04:05 -0700 2006&amp;quot;,
    &amp;quot;02 Jan 06 15:04 MST&amp;quot;,
    &amp;quot;02 Jan 06 15:04 -0700&amp;quot;,
    &amp;quot;Monday, 02-Jan-06 15:04:05 MST&amp;quot;,
    &amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot;,
    &amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot;,
    &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;,
    &amp;quot;2006-01-02T15:04:05.999999999Z07:00&amp;quot;,
    &amp;quot;Jan _2 15:04:05&amp;quot;,
    &amp;quot;Jan _2 15:04:05.000&amp;quot;,
    &amp;quot;Jan _2 15:04:05.000000&amp;quot;,
    &amp;quot;Jan _2 15:04:05.000000000&amp;quot;,
    &amp;quot;_2/Jan/2006:15:04:05 -0700&amp;quot;,
    &amp;quot;Jan 2, 2006 3:04:05 PM&amp;quot;,
    &amp;quot;Jan 2 2006 15:04:05&amp;quot;,
    &amp;quot;Jan 2 15:04:05 2006&amp;quot;,
    &amp;quot;Jan 2 15:04:05 -0700&amp;quot;,
    &amp;quot;2006-01-02 15:04:05,000 -0700&amp;quot;,
    &amp;quot;2006-01-02 15:04:05 -0700&amp;quot;,
    &amp;quot;2006-01-02 15:04:05-0700&amp;quot;,
    &amp;quot;2006-01-02 15:04:05,000&amp;quot;,
    &amp;quot;2006-01-02 15:04:05&amp;quot;,
    &amp;quot;2006/01/02 15:04:05&amp;quot;,
    &amp;quot;06-01-02 15:04:05,000 -0700&amp;quot;,
    &amp;quot;06-01-02 15:04:05,000&amp;quot;,
    &amp;quot;06-01-02 15:04:05&amp;quot;,
    &amp;quot;06/01/02 15:04:05&amp;quot;,
    &amp;quot;15:04:05,000&amp;quot;,
    &amp;quot;1/2/2006 3:04:05 PM&amp;quot;,
    &amp;quot;1/2/06 3:04:05.000 PM&amp;quot;,
    &amp;quot;1/2/2006 15:04&amp;quot;,
    &amp;quot;02Jan2006 03:04:05&amp;quot;,
    &amp;quot;Jan _2, 2006 3:04:05 PM&amp;quot;,
    &amp;quot;2006-01-02T15:04:05Z&amp;quot;,
    &amp;quot;2006-01-02T15:04:05-0700&amp;quot;,
    &amp;quot;2006-01-02T15:04:05.999-0700&amp;quot;,
    &amp;quot;2006-01-02&amp;quot;,
    &amp;quot;15:04:05&amp;quot;,
    &amp;quot;2006-01-02T15:04:05.999999Z&amp;quot;,
    &amp;quot;02/Jan/2006:15:04:05.999&amp;quot;
]

fields = [
    &amp;quot;msgid:string&amp;quot;,             # The message identifier
    &amp;quot;msgtime:time&amp;quot;,             # The timestamp that’s part of the log message
    &amp;quot;severity:integer&amp;quot;,         # The severity of the event, e.g., Emergency, …
    &amp;quot;priority:integer&amp;quot;,         # The pirority of the event
    &amp;quot;apphost:string&amp;quot;,           # The hostname of the host where the log message is generated
    &amp;quot;appip:ipv4&amp;quot;,               # The IP address of the host where the application that generated the log message is running on.
    &amp;quot;appvendor:string&amp;quot;,         # The type of application that generated the log message, e.g., Cisco, ISS
    &amp;quot;appname:string&amp;quot;,           # The name of the application that generated the log message, e.g., asa, snort, sshd
    &amp;quot;srcdomain:string&amp;quot;,         # The domain name of the initiator of the event, usually a Windows domain
    &amp;quot;srczone:string&amp;quot;,           # The originating zone
    &amp;quot;srchost:string&amp;quot;,           # The hostname of the originator of the event or connection.
    &amp;quot;srcip:ipv4&amp;quot;,               # The IPv4 address of the originator of the event or connection.
    &amp;quot;srcipnat:ipv4&amp;quot;,            # The natted (network address translation) IP of the originator of the event or connection.
    &amp;quot;srcport:integer&amp;quot;,          # The port number of the originating connection.
    &amp;quot;srcportnat:integer&amp;quot;,       # The natted port number of the originating connection.
    &amp;quot;srcmac:mac&amp;quot;,               # The mac address of the host that originated the connection.
    &amp;quot;srcuser:string&amp;quot;,           # The user that originated the session.
    &amp;quot;srcuid:integer&amp;quot;,           # The user id that originated the session.
    &amp;quot;srcgroup:string&amp;quot;,          # The group that originated the session.
    &amp;quot;srcgid:integer&amp;quot;,           # The group id that originated the session.
    &amp;quot;srcemail:string&amp;quot;,          # The originating email address
    &amp;quot;dstdomain:string&amp;quot;,         # The domain name of the destination of the event, usually a Windows domain
    &amp;quot;dstzone:string&amp;quot;,           # The destination zone
    &amp;quot;dsthost:string&amp;quot;,           # The hostname of the destination of the event or connection.
    &amp;quot;dstip:ipv4&amp;quot;,               # The IPv4 address of the destination of the event or connection.
    &amp;quot;dstipnat:ipv4&amp;quot;,            # The natted (network address translation) IP of the destination of the event or connection.
    &amp;quot;dstport:integer&amp;quot;,          # The destination port number of the connection.
    &amp;quot;dstportnat:integer&amp;quot;,       # The natted destination port number of the connection.
    &amp;quot;dstmac:mac&amp;quot;,               # The mac address of the destination host.
    &amp;quot;dstuser:string&amp;quot;,           # The user at the destination.
    &amp;quot;dstuid:integer&amp;quot;,           # The user id that originated the session.
    &amp;quot;dstgroup:string&amp;quot;,          # The group that originated the session.
    &amp;quot;dstgid:integer&amp;quot;,           # The group id that originated the session.
    &amp;quot;dstemail:string&amp;quot;,          # The destination email address
    &amp;quot;protocol:string&amp;quot;,          # The protocol, such as TCP, UDP, ICMP, of the connection
    &amp;quot;iniface:string&amp;quot;,           # The incoming interface
    &amp;quot;outiface:string&amp;quot;,          # The outgoing interface
    &amp;quot;policyid:integer&amp;quot;,         # The policy ID
    &amp;quot;sessionid:integer&amp;quot;,        # The session or process ID
    &amp;quot;object:string&amp;quot;,            # The object affected.
    &amp;quot;action:string&amp;quot;,            # The action taken
    &amp;quot;command:string&amp;quot;,           # The command executed
    &amp;quot;method:string&amp;quot;,            # The method in which the action was taken, for example, public key or password for ssh
    &amp;quot;status:string&amp;quot;,            # The status of the action taken
    &amp;quot;reason:string&amp;quot;,            # The reason for the action taken or the status returned
    &amp;quot;bytesrecv:integer&amp;quot;,        # The number of bytes received
    &amp;quot;bytessent:integer&amp;quot;,        # The number of bytes sent
    &amp;quot;pktsrecv:integer&amp;quot;,         # The number of packets received
    &amp;quot;pktssent:integer&amp;quot;,         # The number of packets sent
    &amp;quot;duration:integer&amp;quot;          # The duration of the session
]

[analyzer]
    [analyzer.prekeys]
    address     = [ &amp;quot;srchost&amp;quot;, &amp;quot;srcipv4&amp;quot; ]
    by          = [ &amp;quot;srchost&amp;quot;, &amp;quot;srcipv4&amp;quot;, &amp;quot;srcuser&amp;quot; ]
    command     = [ &amp;quot;command&amp;quot; ]
    connection  = [ &amp;quot;sessionid&amp;quot; ]
    dport       = [ &amp;quot;dstport&amp;quot; ]
    dst         = [ &amp;quot;dsthost&amp;quot;, &amp;quot;dstipv4&amp;quot; ]
    duration    = [ &amp;quot;duration&amp;quot; ]
    egid        = [ &amp;quot;srcgid&amp;quot; ]
    euid        = [ &amp;quot;srcuid&amp;quot; ]
    for         = [ &amp;quot;srchost&amp;quot;, &amp;quot;srcipv4&amp;quot;, &amp;quot;srcuser&amp;quot; ]
    from        = [ &amp;quot;srchost&amp;quot;, &amp;quot;srcipv4&amp;quot; ]
    gid         = [ &amp;quot;srcgid&amp;quot; ]
    group       = [ &amp;quot;srcgroup&amp;quot; ]
    logname     = [ &amp;quot;srcuser&amp;quot; ]
    port        = [ &amp;quot;srcport&amp;quot;, &amp;quot;dstport&amp;quot; ]
    proto       = [ &amp;quot;protocol&amp;quot; ]
    rhost       = [ &amp;quot;srchost&amp;quot;, &amp;quot;srcipv4&amp;quot; ]
    ruser       = [ &amp;quot;srcuser&amp;quot; ]
    sport       = [ &amp;quot;srcport&amp;quot; ]
    src         = [ &amp;quot;srchost&amp;quot;, &amp;quot;srcipv4&amp;quot; ]
    time        = [ &amp;quot;msgtime&amp;quot; ]
    to          = [ &amp;quot;dsthost&amp;quot;, &amp;quot;dstipv4&amp;quot;, &amp;quot;dstuser&amp;quot; ]
    uid         = [ &amp;quot;srcuid&amp;quot; ]
    uname       = [ &amp;quot;srcuser&amp;quot; ]
    user        = [ &amp;quot;srcuser&amp;quot; ]

    [analyzer.keywords]
    action = [
        &amp;quot;access&amp;quot;,
        &amp;quot;alert&amp;quot;,
        &amp;quot;allocate&amp;quot;,
        &amp;quot;allow&amp;quot;,
        &amp;quot;audit&amp;quot;,
        &amp;quot;authenticate&amp;quot;,
        &amp;quot;backup&amp;quot;,
        &amp;quot;bind&amp;quot;,
        &amp;quot;block&amp;quot;,
        &amp;quot;build&amp;quot;,
        &amp;quot;built&amp;quot;,
        &amp;quot;cancel&amp;quot;,
        &amp;quot;clean&amp;quot;,
        &amp;quot;close&amp;quot;,
        &amp;quot;compress&amp;quot;,
        &amp;quot;connect&amp;quot;,
        &amp;quot;copy&amp;quot;,
        &amp;quot;create&amp;quot;,
        &amp;quot;decode&amp;quot;,
        &amp;quot;decompress&amp;quot;,
        &amp;quot;decrypt&amp;quot;,
        &amp;quot;depress&amp;quot;,
        &amp;quot;detect&amp;quot;,
        &amp;quot;disconnect&amp;quot;,
        &amp;quot;download&amp;quot;,
        &amp;quot;encode&amp;quot;,
        &amp;quot;encrypt&amp;quot;,
        &amp;quot;establish&amp;quot;,
        &amp;quot;execute&amp;quot;,
        &amp;quot;filter&amp;quot;,
        &amp;quot;find&amp;quot;,
        &amp;quot;free&amp;quot;,
        &amp;quot;get&amp;quot;,
        &amp;quot;initialize&amp;quot;,
        &amp;quot;initiate&amp;quot;,
        &amp;quot;install&amp;quot;,
        &amp;quot;lock&amp;quot;,
        &amp;quot;login&amp;quot;,
        &amp;quot;logoff&amp;quot;,
        &amp;quot;logon&amp;quot;,
        &amp;quot;logout&amp;quot;,
        &amp;quot;modify&amp;quot;,
        &amp;quot;move&amp;quot;,
        &amp;quot;open&amp;quot;,
        &amp;quot;post&amp;quot;,
        &amp;quot;quarantine&amp;quot;,
        &amp;quot;read&amp;quot;,
        &amp;quot;release&amp;quot;,
        &amp;quot;remove&amp;quot;,
        &amp;quot;replicate&amp;quot;,
        &amp;quot;resume&amp;quot;,
        &amp;quot;save&amp;quot;,
        &amp;quot;scan&amp;quot;,
        &amp;quot;search&amp;quot;,
        &amp;quot;start&amp;quot;,
        &amp;quot;stop&amp;quot;,
        &amp;quot;suspend&amp;quot;,
        &amp;quot;teardown&amp;quot;,
        &amp;quot;uninstall&amp;quot;,
        &amp;quot;unlock&amp;quot;,
        &amp;quot;update&amp;quot;,
        &amp;quot;upgrade&amp;quot;,
        &amp;quot;upload&amp;quot;,
        &amp;quot;violate&amp;quot;,
        &amp;quot;write&amp;quot;
    ]

    status = [
        &amp;quot;accept&amp;quot;,
        &amp;quot;error&amp;quot;,
        &amp;quot;fail&amp;quot;,
        &amp;quot;failure&amp;quot;,
        &amp;quot;success&amp;quot;
    ]

    object = [
        &amp;quot;account&amp;quot;,
        &amp;quot;app&amp;quot;,
        &amp;quot;bios&amp;quot;,
        &amp;quot;driver&amp;quot;,
        &amp;quot;email&amp;quot;,
        &amp;quot;event&amp;quot;,
        &amp;quot;file&amp;quot;,
        &amp;quot;flow&amp;quot;,
        &amp;quot;connection&amp;quot;,
        &amp;quot;memory&amp;quot;,
        &amp;quot;packet&amp;quot;,
        &amp;quot;process&amp;quot;,
        &amp;quot;rule&amp;quot;,
        &amp;quot;session&amp;quot;,
        &amp;quot;system&amp;quot;,
        &amp;quot;thread&amp;quot;,
        &amp;quot;vuln&amp;quot;
    ]

    srcuser = [
        &amp;quot;root&amp;quot;,
        &amp;quot;admin&amp;quot;,
        &amp;quot;administrator&amp;quot;
    ]

    method = [
        &amp;quot;password&amp;quot;,
        &amp;quot;publickey&amp;quot;
    ]

    protocol = [
        &amp;quot;udp&amp;quot;,
        &amp;quot;tcp&amp;quot;,
        &amp;quot;icmp&amp;quot;,
        &amp;quot;http/1.0&amp;quot;,
        &amp;quot;http/1.1&amp;quot;
    ]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Patterns</title>
      <link>http://sequencer.io/manual/patterns/</link>
      <pubDate>Sat, 28 Feb 2015 18:48:24 -0800</pubDate>
      
      <guid>http://sequencer.io/manual/patterns/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#&#34; class=&#34;image fit&#34;&gt;&lt;img src=&#34;http://sequencer.io/images/pic08.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sequence&lt;/code&gt; &lt;em&gt;parser&lt;/em&gt; does not use regular expression. In fact, it won&amp;rsquo;t understand any regular expression in the patterns even if you put them there. What it does recognize is a sequential pattern that follows the same format as the message it self. For fields that the analyst wants to extract, a field token of the form %fieldname% is put in its place.&lt;/p&gt;

&lt;p&gt;As an example, this is pattern that&amp;rsquo;s applied to the corresponding sudo message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jan 15 14:07:04 testserver sudo: pam_unix(sudo:auth): password failed

%msgtime% %apphost% %appname% : pam_unix ( sudo : %action% ) : %method% %status%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we are tagging six different tokens of the message with semantic fields, including:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%msgtime%&lt;/td&gt;
&lt;td&gt;jan 15 14:07:04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%apphost%&lt;/td&gt;
&lt;td&gt;testserver&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%appname%&lt;/td&gt;
&lt;td&gt;sudo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%action%&lt;/td&gt;
&lt;td&gt;auth&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%method%&lt;/td&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%status%&lt;/td&gt;
&lt;td&gt;failed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that it is not required to add spaces before and after the parenthesis. The parser uses the same scanner for message patters as it uses for the messages themselves, so the parenthesis will be extracted as separate tokens in both cases. It just seems to be more clear to have the spaces.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another longer example (which you may have to horizontall scroll to see):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id=firewall time=&amp;quot;2005-03-18 14:01:46&amp;quot; fw=TOPSEC priv=6 recorder=kernel type=conn policy=414 proto=TCP rule=accept src=61.167.71.244 sport=35223 dst=210.82.119.211 dport=25 duration=27 inpkt=37 outpkt=39 sent=1770 rcvd=20926 smac=00:04:c1:8b:d8:82 dmac=00:0b:5f:b2:1d:80

id = %appname% time = &amp;quot; %msgtime% &amp;quot; fw = %apphost% priv = %integer% recorder = %string% type = %string% policy = %policyid% proto = %protocol% rule = %status% src = %srcip% sport = %srcport% dst = %dstip% dport = %dstport% duration = %integer% inpkt = %pktsrecv% outpkt = %pktssent% sent = %bytessent% rcvd = %bytesrecv% smac = %srcmac% dmac = %dstmac%
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;field-tokens:14e2d0f08075306ded7951a1dfc5e3e0&#34;&gt;Field Tokens&lt;/h3&gt;

&lt;p&gt;A field token is of the format &amp;ldquo;%field:type:meta%&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;field is the name of the field&lt;/li&gt;
&lt;li&gt;type is the token type of the field&lt;/li&gt;
&lt;li&gt;meta is one of the following meta characters -, +, *, where

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;-&amp;rdquo; means the rest of the tokens&lt;/li&gt;
&lt;li&gt;&amp;rdquo;+&amp;rdquo; means one or more of this token&lt;/li&gt;
&lt;li&gt;&amp;ldquo;*&amp;rdquo; means zero or more of this token&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A field token can take different formats. The supported formats are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;%field%&lt;/li&gt;
&lt;li&gt;%type%&lt;/li&gt;
&lt;li&gt;%field:type%&lt;/li&gt;
&lt;li&gt;%field:meta%&lt;/li&gt;
&lt;li&gt;%type:meta%&lt;/li&gt;
&lt;li&gt;%field:type:meta%&lt;/li&gt;
&lt;li&gt;%field:-:until%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;using-the-meta-character:14e2d0f08075306ded7951a1dfc5e3e0&#34;&gt;Using the &lt;code&gt;-&lt;/code&gt; Meta Character&lt;/h4&gt;

&lt;p&gt;Below is an example of how to use the &lt;code&gt;-&lt;/code&gt; meta character:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jan 14 10:15:56 testserver sudo:    gonner : tty=pts/3 ; pwd=/home/gonner ; user=root ; command=/bin/su - ustream

%msgtime% %apphost% %appname% : %srcuser% : tty = %string% ; pwd = %string% ; user = %dstuser% ; command = %method:-%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, most field tokens are specified in the %field% format, except for the last one. The last token, &lt;code&gt;%method:-&lt;/code&gt;, specifies that the &lt;code&gt;%method%&lt;/code&gt; token should consume the rest of the tokens. This means the &lt;code&gt;%method%&lt;/code&gt; token will have the value of &lt;code&gt;/bin/su - ustream&lt;/code&gt;. This field token can also be specified as &lt;code&gt;%method::-&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;using-the-meta-character-1:14e2d0f08075306ded7951a1dfc5e3e0&#34;&gt;Using the &lt;code&gt;+&lt;/code&gt; Meta Character&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s an example of using the &lt;code&gt;+&lt;/code&gt; meta character:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feb  8 21:51:10 mail postfix/pipe[84059]: 440682230: to=&amp;lt;userB@company.office&amp;gt;, orig_to=&amp;lt;userB@company.biz&amp;gt;, relay=dovecot, delay=0.9, delays=0.87/0/0/0.03, dsn=2.0.0, status=sent (delivered via dovecot service)

%msgtime% %apphost% %appname% [ %sessionid% ] : %msgid:integer% : to = &amp;lt; %srcemail% &amp;gt; , orig_to = &amp;lt; %string% &amp;gt; , relay = %string% , delay = %float% , delays = %string% , dsn = %string% , status = %status% ( %reason::+% )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the 2nd to the last token is &lt;code&gt;%reason::+%&lt;/code&gt;. This means the &lt;code&gt;%reason%&lt;/code&gt; field token will consume one or more tokens until the close parenthesis. This can also be written as &lt;code&gt;%reason:+%&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;using-the-meta-character-2:14e2d0f08075306ded7951a1dfc5e3e0&#34;&gt;Using the &lt;code&gt;*&lt;/code&gt; Meta Character&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s an example of using the &lt;code&gt;*&lt;/code&gt; meta character:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id=firewall time=&amp;quot;2005-03-18 14:01:46&amp;quot; fw=TOPSEC priv= recorder=kernel type=conn policy=414 proto=TCP rule=accept src=61.167.71.244 sport=35223 dst=210.82.119.211 dport=25 duration=27 inpkt=37 outpkt=39 sent=1770 rcvd=20926 smac=00:04:c1:8b:d8:82 dmac=00:0b:5f:b2:1d:80

id = %appname% time = &amp;quot; %msgtime% &amp;quot; fw = %apphost% priv = %integer:*% recorder = %string% type = %string% policy = %policyid% proto = %protocol% rule = %status% src = %srcip% sport = %srcport% dst = %dstip% dport = %dstport% duration = %integer% inpkt = %pktsrecv% outpkt = %pktssent% sent = %bytessent% rcvd = %bytesrecv% smac = %srcmac% dmac = %dstmac%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, part of the pattern is specified as &lt;code&gt;priv = %integer:*%&lt;/code&gt;. This means the value for &lt;code&gt;priv&lt;/code&gt; may or may not be there. This can also be written as &lt;code&gt;%:integer:*%&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;using-the-until-format:14e2d0f08075306ded7951a1dfc5e3e0&#34;&gt;Using the &amp;lsquo;until&amp;rsquo; Format&lt;/h4&gt;

&lt;p&gt;A common use case is to consume all tokens until a specific token is hit. As an example, below is an example of a message that has some JSON-like text in the middle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-01-24T19:34:47.269-0500 [conn72800] query foo.bar query: { _id: { $gte: { ContactId: BinData(3, 6C764EA2DABCE241C3E) }, $lt: { ContactId: BinData(3, 6C764EA2DAB4D9B1C3F) } } } planSummary: IXSCAN { _id: 1 } ntoreturn:0 ntoskip:0 nscanned:12 nscannedObjects:12 keyUpdates:0 numYields:10 locks(micros) r:2733 nreturned:12 reslen:4726 102ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we want to extract anything after &amp;ldquo;query:&amp;rdquo; and before &amp;ldquo;planSummary&amp;rdquo; into the &lt;em&gt;object&lt;/em&gt; field. To do that, we can write the following rule:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%msgtime% [ %threadid% ] query %string% query : %object:-:plansummary% plansummary : %object::-%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the token &lt;code&gt;%object:-:plansummary%&lt;/code&gt;. What this says is that consume all the tokens from this point on, until the token &lt;code&gt;plansummary&lt;/code&gt; is found. So the end result is &lt;code&gt;object&lt;/code&gt; field will contain&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ _id: { $gte: { ContactId: BinData(3, 6C764EA2DABCE241C3E) }, $lt: { ContactId: BinData(3, 6C764EA2DAB4D9B1C3F) } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this token is done, the rest of the rule continues. Because this token does not consume the token &lt;code&gt;plansummary&lt;/code&gt;, we start the rule again from that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time Formats</title>
      <link>http://sequencer.io/manual/timeformats/</link>
      <pubDate>Sat, 28 Feb 2015 18:48:24 -0800</pubDate>
      
      <guid>http://sequencer.io/manual/timeformats/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;#&#34; class=&#34;image fit&#34;&gt;&lt;img src=&#34;http://sequencer.io/images/pic06.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most difficult task in log parsing is recognizing and understanding the different time formats. Syslog RFCs have defined a couple formats that the syslog servers abide to. However, there are many log messages out there that don&amp;rsquo;t use the two syslog time formats.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sequence&lt;/code&gt; currently automatically recognizes 42 different time formats as listed below. More will be added, so the best (authoritative) place to check is &lt;a href=&#34;https://github.com/trustpath/sequence&#34;&gt;sequence.toml&lt;/a&gt; in the github repo.&lt;/p&gt;

&lt;p&gt;When writing rules, analysts don&amp;rsquo;t need to know what time formats are used in the log messages. They just need to know that there&amp;rsquo;s a time at a certain location of the message. &lt;code&gt;sequence&lt;/code&gt; will automatically detecting the time format, and normalizing the time formats into a single one.&lt;/p&gt;

&lt;p&gt;In the table below, the reference time used in the layouts is the specific time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mon Jan 2 15:04:05 MST 2006
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is Unix time 1136239445. Since MST is GMT-0700, the reference time can be thought of as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;01/02 03:04:05PM &#39;06 -0700
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The best way to remember this is that the numbers are contiguous: 01, 02, 03, 04, 05, 06, 07 in the above format. Make sure you write the time format correctly as it will be used to normalize the different time stamps.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Time Formats&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 MST 2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;Mon Jan 02 15:04:05 -0700 2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 MST&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 -0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;Monday, 02-Jan-06 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8.&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 -0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9.&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05Z07:00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10.&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05.999999999Z07:00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11.&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12.&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;13.&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;14.&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;15.&lt;/td&gt;
&lt;td&gt;_2/Jan/2006:15:04:05 -0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;16.&lt;/td&gt;
&lt;td&gt;Jan 2, 2006 3:04:05 PM&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;17.&lt;/td&gt;
&lt;td&gt;Jan 2 2006 15:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;18.&lt;/td&gt;
&lt;td&gt;Jan 2 15:04:05 2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;19.&lt;/td&gt;
&lt;td&gt;Jan 2 15:04:05 -0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;20.&lt;/td&gt;
&lt;td&gt;2006-01-02 15:04:05,000 -0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;21.&lt;/td&gt;
&lt;td&gt;2006-01-02 15:04:05 -0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;22.&lt;/td&gt;
&lt;td&gt;2006-01-02 15:04:05-0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;23.&lt;/td&gt;
&lt;td&gt;2006-01-02 15:04:05,000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;24.&lt;/td&gt;
&lt;td&gt;2006-01-02 15:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;25.&lt;/td&gt;
&lt;td&gt;2006/01/02 15:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;26.&lt;/td&gt;
&lt;td&gt;06-01-02 15:04:05,000 -0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;27.&lt;/td&gt;
&lt;td&gt;06-01-02 15:04:05,000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;28.&lt;/td&gt;
&lt;td&gt;06-01-02 15:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;29.&lt;/td&gt;
&lt;td&gt;06/01/02 15:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;30.&lt;/td&gt;
&lt;td&gt;15:04:05,000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;31.&lt;/td&gt;
&lt;td&gt;1/2/2006 3:04:05 PM&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;32.&lt;/td&gt;
&lt;td&gt;1/2/06 3:04:05.000 PM&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;33.&lt;/td&gt;
&lt;td&gt;1/2/2006 15:04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;34.&lt;/td&gt;
&lt;td&gt;02Jan2006 03:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;35.&lt;/td&gt;
&lt;td&gt;Jan _2, 2006 3:04:05 PM&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;36.&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05Z&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;37.&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05-0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;38.&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05.999-0700&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;39.&lt;/td&gt;
&lt;td&gt;2006-01-02&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;40.&lt;/td&gt;
&lt;td&gt;15:04:05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;41.&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05.999999Z&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;42.&lt;/td&gt;
&lt;td&gt;02/Jan/2006:15:04:05.999&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Predefined Fields</title>
      <link>http://sequencer.io/manual/fields/</link>
      <pubDate>Sat, 28 Feb 2015 18:48:24 -0800</pubDate>
      
      <guid>http://sequencer.io/manual/fields/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;#&#34; class=&#34;image fit&#34;&gt;&lt;img src=&#34;http://sequencer.io/images/pic04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goal of any log parser is to extract meaningful parts from a log message and then semantically tag them so other tools can perform analysis on the tags and values. In &lt;code&gt;sequence&lt;/code&gt;, these tags are called &lt;em&gt;fields&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sequence&lt;/code&gt; predefines a set of fields based on the analysis of many system and network logs. However, analysts can add their own fields to the file as well. When adding a new field, user can add a field of the format &lt;code&gt;field:type&lt;/code&gt; to the &lt;code&gt;parser&lt;/code&gt; portion of the configuration file in the &lt;code&gt;fields&lt;/code&gt; array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[parser]
fields = [
	&amp;quot;msgid:string&amp;quot;,				# The message identifier
	.
	.
	.
	&amp;quot;userdefined1:string&amp;quot;			# This is user defined field #1
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The field name can be any alphanumeric &lt;code&gt;a-zA-Z0-9_]&lt;/code&gt; string chosen by the user. The type can be any of the pre-defined &lt;a href=&#34;http://sequencer.io/manual/tokens&#34;&gt;token types&lt;/a&gt;. The type is considered to be the default type of the field. When a field is defined in a message pattern, if no type is defined in pattern, then the default type is used. This helps reduce the amount of typing analysts have to do.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s highly recommended that all user defined fields are added to the end of the array, after the predefined fields. A comment explaning what it is and how it might be used is also highly recommended.&lt;/p&gt;

&lt;p&gt;The following list of fields are predefined in the &lt;a href=&#34;http://sequencer.io/manual/config.md&#34;&gt;sequence.toml&lt;/a&gt; file.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;msgid&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The message identifier&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;msgtime&lt;/td&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;The timestamp that’s part of the log message&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;severity&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The severity of the event, e.g., Emergency, …&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;priority&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The pirority of the event&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;apphost&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The hostname of the host where the log message is generated&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;appip&lt;/td&gt;
&lt;td&gt;ipv4&lt;/td&gt;
&lt;td&gt;The IP address of the host where the application that generated the log message is running on.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;appvendor&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The type of application that generated the log message, e.g., Cisco, ISS&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;appname&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The name of the application that generated the log message, e.g., asa, snort, sshd&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcdomain&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The domain name of the initiator of the event, usually a Windows domain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srczone&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The originating zone&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srchost&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The hostname of the originator of the event or connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcip&lt;/td&gt;
&lt;td&gt;ipv4&lt;/td&gt;
&lt;td&gt;The IPv4 address of the originator of the event or connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcipnat&lt;/td&gt;
&lt;td&gt;ipv4&lt;/td&gt;
&lt;td&gt;The natted (network address translation) IP of the originator of the event or connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcport&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The port number of the originating connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcportnat&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The natted port number of the originating connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcmac&lt;/td&gt;
&lt;td&gt;mac&lt;/td&gt;
&lt;td&gt;The mac address of the host that originated the connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcuser&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The user that originated the session.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcuid&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The user id that originated the session.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcgroup&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The group that originated the session.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcgid&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The group id that originated the session.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srcemail&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The originating email address&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstdomain&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The domain name of the destination of the event, usually a Windows domain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstzone&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The destination zone&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dsthost&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The hostname of the destination of the event or connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstip&lt;/td&gt;
&lt;td&gt;ipv4&lt;/td&gt;
&lt;td&gt;The IPv4 address of the destination of the event or connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstipnat&lt;/td&gt;
&lt;td&gt;ipv4&lt;/td&gt;
&lt;td&gt;The natted (network address translation) IP of the destination of the event or connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstport&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The destination port number of the connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstportnat&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The natted destination port number of the connection.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstmac&lt;/td&gt;
&lt;td&gt;mac&lt;/td&gt;
&lt;td&gt;The mac address of the destination host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstuser&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The user at the destination.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstuid&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The user id that originated the session.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstgroup&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The group that originated the session.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstgid&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The group id that originated the session.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dstemail&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The destination email address&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;protocol&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The protocol, such as TCP, UDP, ICMP, of the connection&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;iniface&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The incoming interface&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;outiface&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The outgoing interface&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;policyid&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The policy ID&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sessionid&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The session or process ID&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The object affected.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;action&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The action taken&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;command&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The command executed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;method&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The method in which the action was taken, for example, public key or password for ssh&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;status&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The status of the action taken&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;reason&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The reason for the action taken or the status returned&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bytesrecv&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The number of bytes received&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bytessent&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The number of bytes sent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pktsrecv&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The number of packets received&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pktssent&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The number of packets sent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;duration&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;The duration of the session&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Token Types</title>
      <link>http://sequencer.io/manual/tokens/</link>
      <pubDate>Sat, 28 Feb 2015 18:48:24 -0800</pubDate>
      
      <guid>http://sequencer.io/manual/tokens/</guid>
      <description>&lt;p&gt;The &lt;code&gt;sequence&lt;/code&gt; &lt;em&gt;scanner&lt;/em&gt; will attempt to automatically recognize the following token types.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;timestamp, in the format listed in &lt;a href=&#34;http://sequencer.io/manual/timeformats/&#34;&gt;TimeFormats&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ipv4&lt;/td&gt;
&lt;td&gt;IPv4 address, in the form of a.b.c.d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ipv6&lt;/td&gt;
&lt;td&gt;IPv6 address&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;integer number&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;floating point number of the form xx.yy&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;uri&lt;/td&gt;
&lt;td&gt;URL, in the form of http://&amp;hellip; or https://&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mac&lt;/td&gt;
&lt;td&gt;mac address, in the form of aa:bb:cc:dd:ee:ff&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;string that reprensents multiple possible values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;literal&lt;/td&gt;
&lt;td&gt;a literal string, fixed value, not used by rules&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>